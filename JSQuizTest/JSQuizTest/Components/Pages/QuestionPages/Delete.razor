@page "/questions/delete"
@using JSQuizTest.Models
@inject NavigationManager NavigationManager
@using JSQuizTest.Data
@inject ApplicationDbContext DB
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<ApplicationDbContext> DbFactory

@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Policy = "IsAdmin")]

<PageTitle>Question Delete</PageTitle>

<h1>Question Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>Question</h4>
    <hr />
    @if (question is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@question.Description</dd>
        </dl>
        <EditForm method="post" Model="question" OnValidSubmit="DeleteQuestion" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(question is null)">Delete</button> |
            @if (question is not null) {
                <a href=@($"/quizzes/details?id={question.QuizId}")>Back to Quiz</a>
            }

        </EditForm>
    }
</div>

@code {
    Question? question;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override void OnInitialized()
    {
        question = DB.Question.Find(Id);

        if (question is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteQuestion()
    {
        var context = await DbFactory.CreateDbContextAsync();
        context.Question.Remove(question!);
        await context.SaveChangesAsync();

        if (question is not null)
        {
            NavigationManager.NavigateTo($"/quizzes/details?id={question.QuizId}");
        }
    }
}
